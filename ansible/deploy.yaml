---
- name: install and configure semiphemeral server
  hosts: app
  remote_user: root

  tasks:
    - name: set hostname
      hostname:
        name: "semiphemeral-{{ deploy_environment }}"

    - name: update all packages
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes

    - name: ensure dependencies are installed
      apt:
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - unattended-upgrades
          - certbot
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg2
          - software-properties-common

    - name: ensure digitalocean apt key is added
      apt_key:
        id: 9FE3B226BD775196D8C2E599DE88104AA4C6383F
        url: https://repos.insights.digitalocean.com/sonar-agent.asc
        state: present

    - name: ensure digitalocean apt repository is installed
      apt_repository:
        repo: deb https://repos.insights.digitalocean.com/apt/do-agent/ main main
        state: present

    - name: ensure digitalocean agent is installed
      apt:
        force_apt_get: yes
        name: do-agent
        state: present

    - name: ensure docker apt key is added
      apt_key:
        id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: ensure docker apt repository is installed
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: ensure docker is installed
      apt:
        force_apt_get: yes
        state: present
        name: "{{ packages }}"
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose
          - python3-pip

    - name: ensure docker python module is installed
      shell: pip3 install --upgrade pyyaml docker docker-compose

    - name: ensure unattended-upgrades is configured
      shell: |
        echo unattended-upgrades unattended-upgrades/enable_auto_updates boolean true | debconf-set-selections
        dpkg-reconfigure -f noninteractive unattended-upgrades

    - name: ensure unattended-upgrades is enabled
      systemd:
        name: unattended-upgrades
        state: started
        enabled: yes

    - name: ensure semiphemeral directory exists
      file:
        path: /opt/semiphemeral
        state: directory

    - name: ensure web volume directory has the right permissions
      file:
        path: /opt/semiphemeral/data/web
        state: directory
        owner: "1000"
        mode: 0700

    - name: ensure bulk_dms volume directory has the right permissions
      file:
        path: /opt/semiphemeral/data/bulk_dms
        state: directory
        owner: "1000"
        mode: 0700

    - name: ensure proxy volume data directory has the right permissions
      file:
        path: /opt/semiphemeral/data/proxy
        state: directory
        owner: "101" # nginx user
        mode: 0700

    - name: /etc/logrotate.d/semiphemeral template
      template:
        src: ./etc/logrotate.d/semiphemeral
        dest: /etc/logrotate.d/semiphemeral

    - name: ensure we have a Let's Encrypt certificate (production)
      shell: certbot certonly --standalone -n --agree-tos --email micah@micahflee.com -d {{ domain }}

    - name: ensure /root/.screenrc is there
      copy:
        src: "root/.screenrc"
        dest: /root/.screenrc

    - name: ensure /root/.vimrc is there
      copy:
        src: "root/.vimrc"
        dest: /root/.vimrc

    - name: check if swap file exists
      stat:
        path: /swapfile
      register: swapfile

    - name: create 16GB swapfile
      shell: fallocate -l 16G /swapfile
      when: swapfile.stat.exists == false

    - name: ensure swapfile has the right permissions
      file:
        path: /swapfile
        owner: "root"
        group: "root"
        mode: "0600"

    - name: check if swapfile is formatted
      shell: file /swapfile | grep "swap file (new style)"
      ignore_errors: yes
      register: file_swapfile

    - name: format swapfile
      shell: mkswap /swapfile
      when: file_swapfile.rc != 0

    - name: ensure /etc/fstab has the swap file
      copy:
        src: "etc/fstab"
        dest: /etc/fstab

    - name: make sure swap is on
      shell: swapon --all

    - name: ensure crons are enabled to automatically cleanup database
      cron:
        name: "cleanup users and DMs"
        minute: "30"
        hour: "4"
        job: docker exec -it app_jobs_1 poetry run python tasks.py cleanup-users && docker exec -it app_jobs_1 poetry run python tasks.py cleanup-dm-jobs
